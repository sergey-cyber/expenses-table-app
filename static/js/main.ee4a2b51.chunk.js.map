{"version":3,"sources":["components/createExpForm/create-exp-form.module.scss","components/choosePeriod/choosePeriod.module.scss","components/table.module.scss","components/footer/footer.module.scss","redux/table-reduser.ts","api/api.js","utilits/calcCurrentDate.ts","utilits/randomKeyGenerator.ts","components/createExpForm/create-exp-form.tsx","components/common/preloader.tsx","components/table.jsx","components/footer/footer.tsx","components/choosePeriod/choosePeriod.tsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["module","exports","Actions","instance","axios","baseURL","headers","expensesDataAPI","year","month","get","then","response","data","newExpenseData","post","newMonthData","patch","itemKey","delete","getCurrentYear","String","Date","getFullYear","getCurrentMonth","getMonth","initialState","dataSource","currentYear","currentMonth","dataSourceIsLoading","setDataIsLoading","isLoading","type","SET_DATA_IS_LOADING","getAllExpensesData","dispatch","expenses","resultCode","GET_ALL_EXPENSES","tableReduser","state","action","SET_CUURENT_DATE","generateHexString","length","ret","Math","random","toString","substring","console","log","CrateExpenseForm","props","initFormData","discription","cost","inThisMounth","date","useState","formData","setFormData","requiredError","setRequiredError","useSelector","tableData","useDispatch","handleChange","event","name","target","value","checked","Modal","open","showCreateExpenseForm","closeIcon","onClose","setShowCreateExpenseForm","onOpen","Header","content","Content","Form","onSubmit","submitValues","key","newData","postNewExpense","preventDefault","Field","required","placeholder","onChange","className","styles","error","checkbox","Button","primary","Preloader","LoadingOutlined","style","fontSize","spin","EditableContext","React","createContext","EditableRow","index","useForm","form","component","Provider","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","childNode","Item","margin","rules","message","ref","onPressEnter","onBlur","paddingRight","onClick","EditableTable","handleDelete","handleAdd","row","findIndex","item","splice","componentDidMount","columns","width","render","_","onConfirm","count","this","components","body","cell","map","col","onCell","marginBottom","disabled","startDataLoading","table","rowClassName","bordered","Component","connect","Footer","costSumm","el","reduce","start","end","footer","yearOptions","text","monthOptions","ChoosePeriod","setYear","setMonth","choosePeriod","Select","options","choosePeriodItem","e","App","paddingTop","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee4a2b51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"create-exp-form_checkbox__2U6Nv\",\"error\":\"create-exp-form_error__W-yZF\",\"fieldError\":\"create-exp-form_fieldError__Q_t2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"choosePeriod\":\"choosePeriod_choosePeriod__HVfpJ\",\"choosePeriodItem\":\"choosePeriod_choosePeriodItem__ceR1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__3EzUw\",\"deleteBtn\":\"table_deleteBtn__pTHfJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__jVOIr\"};","import { expensesDataAPI } from \"../api/api\";\r\nimport { getCurrentMonth, getCurrentYear } from \"../utilits/calcCurrentDate\";\r\n\r\nenum Actions {\r\n    GET_ALL_EXPENSES = 'expenses-app/tableData/GET_ALL_EXPENSES',\r\n    SET_DATA_IS_LOADING = 'expenses-app/tableData/SET_DATA_IS_LOADING',\r\n    SET_CUURENT_DATE = 'expenses-app/tableData/SET_CUURENT_DATE'\r\n}\r\n\r\nexport type ExpenseData = {\r\n    key: string,\r\n    discription: string,\r\n    cost: number,\r\n    date: string\r\n}\r\n\r\nexport type State = {\r\n    dataSource: Array<ExpenseData> | [],\r\n    currentYear: string,\r\n    currentMonth: string,\r\n    dataSourceIsLoading: boolean\r\n}\r\n\r\ntype Action = {\r\n        type: Actions.GET_ALL_EXPENSES,\r\n        dataSource: Array<ExpenseData>\r\n    } | {\r\n        type: Actions.SET_DATA_IS_LOADING,\r\n        isLoading: boolean\r\n    } | {\r\n        type: Actions.SET_CUURENT_DATE,\r\n        currentYear: string,\r\n        currentMonth: string\r\n    }\r\n\r\nconst initialState: State = {\r\n    dataSource: [],\r\n    currentYear: getCurrentYear,\r\n    currentMonth: getCurrentMonth,\r\n    dataSourceIsLoading: false\r\n};\r\n\r\nconst tableReduser = (state: State = initialState, action: Action): State => {\r\n    switch (action.type) {\r\n        case Actions.GET_ALL_EXPENSES:\r\n            return {\r\n                ...state,\r\n                dataSource: action.dataSource,\r\n            }\r\n        case Actions.SET_DATA_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                dataSourceIsLoading: action.isLoading,\r\n        }\r\n        case Actions.SET_CUURENT_DATE:\r\n            return {\r\n                ...state,\r\n                currentYear: action.currentYear,\r\n                currentMonth: action.currentMonth\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Action Creators\r\n\r\nexport const getAllExpensesDataAction = (expenses:Array<ExpenseData>): Action => {\r\n    return { type: Actions.GET_ALL_EXPENSES, dataSource: expenses };\r\n}\r\n\r\nexport const setDataIsLoading = (isLoading: boolean): Action => {\r\n    return { type: Actions.SET_DATA_IS_LOADING, isLoading };\r\n}\r\n\r\nexport const setCurrentDate = (currentYear: string, currentMonth: string): Action => {\r\n    return { type: Actions.SET_CUURENT_DATE, currentYear, currentMonth };\r\n}\r\n\r\n//Thunks\r\n\r\nexport const getAllExpensesData = (currentYear: string, currentMonth: string) => {   \r\n    return (dispatch: any) => {\r\n        dispatch(setDataIsLoading(true));\r\n        return expensesDataAPI.getAllExpenses(currentYear, currentMonth).then((response: any) => {\r\n            if (response.resultCode === 'successfull') {\r\n                dispatch(getAllExpensesDataAction(response.expenses));\r\n            }\r\n            dispatch(setDataIsLoading(false));\r\n        });\r\n    }\r\n}\r\n\r\nexport const postNewExpense = (year: string, month: string, newData: ExpenseData) => {   \r\n    return (dispatch: any) => {\r\n        return expensesDataAPI.postNewExpense(year, month, newData).then((response: any) => {\r\n            if (response.resultCode === 'successfull') {\r\n                dispatch(getAllExpensesData(year, month));\r\n            }\r\n        });\r\n    }\r\n}\r\n/*\r\nexport const login = (email, password, rememberMe) => { //Lesson 78\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuth());\r\n        } else {\r\n            dispatch(stopSubmit('login', { _error: 'Error in password or email' })); //Lesson 79\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {    //Lesson 78\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout();\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n} */\r\n\r\nexport default tableReduser;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({ \r\n    /* withCredentials: true, */\r\n    baseURL: /* 'http://localhost:5000/api/' */ 'https://my-expenses-table-app.herokuapp.com/api/',\r\n    headers: {\r\n        /* \"Access-Control-Allow-Origin\": \"*\" */\r\n    }    \r\n});\r\n\r\nexport const expensesDataAPI = {\r\n    getAllExpenses (year, month) {\r\n        return instance.get(`expensesData?year=${year}&month=${month}`) //Базовый урл сам добавляется\r\n            .then((response) => response.data)\r\n    },\r\n    postNewExpense(year, month, newExpenseData) {  //в объекте приходит: key, discription, cost, date\r\n        return instance.post('expensesData', { year, month, newExpenseData}) \r\n            .then((response) => response.data)\r\n    },\r\n    editExpense(year, month, newMonthData) {  //Приходит массив со всеми данными\r\n        return instance.patch('expensesData', {year, month, newMonthData}) \r\n            .then((response) => response.data)\r\n    },\r\n    deleteExpense(year, month, itemKey) {  //в объекте приходит: key, no, discription, cost, date\r\n        return instance.delete(`expensesData?year=${year}&month=${month}&itemKey=${itemKey}`) //Отправляем Key элемента который нужно удалить \r\n            .then((response) => response.data)\r\n    }\r\n}\r\n\r\n/* export const homePageDataAPI = {\r\n    getReviewsPart (currentRevPart = 1, revPartSize = 5) {\r\n        return instance.get(`home?currentRevPart=${currentRevPart}&revPartSize=${revPartSize}`) \r\n            .then((response) => response.data)\r\n    },\r\n    postNewReview (reviewFormData) {\r\n        return instance.post('home/', {reviewFormData}) \r\n            .then((response) => response.data)\r\n    }\r\n} */\r\n\r\n\r\n","export const getCurrentYear: string = String(new Date().getFullYear());\r\nconst monthIndex: number = new Date().getMonth();\r\nconst months: Array<string> = ['January','February','March','April','May','June','July','August','September','October','November','December']\r\nexport const getCurrentMonth: string = months[monthIndex-1];","export function generateHexString(length: number): string {\r\n    var ret: string = \"\";\r\n    while (ret.length < length) {\r\n      ret += Math.random().toString(16).substring(2);\r\n    }\r\n    return ret.substring(0,length);\r\n  }\r\n  \r\n  // 40-/64-bit WEP: 10 digit key\r\n  console.log(\"40-bit:\" + generateHexString(10));\r\n  \r\n  // 104-/128-bit WEP: 26 digit key\r\n  console.log(\"104-bit:\" + generateHexString(26))\r\n  \r\n  // 256-bit WEP: 58 digit key\r\n  console.log(\"256-bit:\" + generateHexString(58));","import React, { useState } from 'react';\r\nimport styles from './create-exp-form.module.scss';\r\nimport { Button, Header, Modal, Form } from 'semantic-ui-react'\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { postNewExpense, State } from '../../redux/table-reduser';\r\nimport { generateHexString } from '../../utilits/randomKeyGenerator';\r\n\r\ntype FormData = {\r\n    discription: string,\r\n    cost: number,\r\n    inThisMounth: boolean,\r\n    date: string\r\n}\r\n\r\ntype Props = {\r\n    setShowCreateExpenseForm: any,\r\n    showCreateExpenseForm: boolean\r\n}\r\n\r\ntype SubmitValues = {\r\n    key: string,\r\n    discription: string,\r\n    cost: number,\r\n    date: string,\r\n}\r\n\r\nexport function CrateExpenseForm (props: Props) {\r\n\r\n    const initFormData: FormData = {\r\n        discription: '',\r\n        cost: 0,\r\n        inThisMounth: true,\r\n        date: ''\r\n    }\r\n\r\n    const [formData, setFormData ] = useState(initFormData);\r\n    const [requiredError, setRequiredError] = useState({discription: false, cost: false});\r\n    const year: string = useSelector((state: any) => state.tableData.currentYear);\r\n    const month: string = useSelector((state: any) => state.tableData.currentMonth);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSubmit = (event: any) => {\r\n        const submitValues: SubmitValues = {\r\n            key: generateHexString(26),\r\n            discription: formData.discription,\r\n            cost: formData.cost,\r\n            date: formData.date ? formData.date : month\r\n        }\r\n        dispatch(postNewExpense(year, month, submitValues));\r\n        props.setShowCreateExpenseForm(false);\r\n        setFormData(initFormData);\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event: any) => {\r\n        const name = event.target.name;\r\n        const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        setFormData({...formData, [name]: value});\r\n        if(!value) {\r\n            setRequiredError({...requiredError, [name]: true})\r\n        } else {\r\n            setRequiredError({...requiredError, [name]: false})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal open={props.showCreateExpenseForm} closeIcon\r\n                 onClose={() => props.setShowCreateExpenseForm(false)} \r\n                 onOpen={() => props.setShowCreateExpenseForm(true)} >\r\n            <Header content='Create new Expense' />\r\n            <Modal.Content>\r\n            <Form onSubmit={handleSubmit} >\r\n                <Form.Field required>\r\n                    <label>Discription:</label>\r\n                    <textarea required placeholder='Expense name' name='discription' value={formData.discription} onChange={handleChange} />\r\n                    {requiredError.discription && <div className={styles.error}>Require field</div>}\r\n                </Form.Field>\r\n                <Form.Field required>\r\n                    <label>Cost:</label>\r\n                    <input type='number' placeholder='Expense cost' name='cost' value={formData.cost} onChange={handleChange} required />\r\n                    {requiredError.cost && <div className={styles.error}>Require field</div>}\r\n                </Form.Field>\r\n                {\r\n                !formData.inThisMounth && \r\n                <Form.Field>\r\n                    <label>Date:</label>\r\n                    <input placeholder='Expense date' name='date' value={formData.date} onChange={handleChange} />\r\n                </Form.Field>\r\n                }               \r\n                <Form.Field>\r\n                <label className={styles.checkbox}>In this mounth:\r\n                    <input type=\"checkbox\" name='inThisMounth' checked={formData.inThisMounth} onChange={handleChange} />\r\n                </label>\r\n                </Form.Field>\r\n                <Button primary type='submit'>Create</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n    )\r\n}","import React from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\ntype Props = {\r\n    fontSize: number\r\n}\r\n\r\nexport function Preloader(props: Props) {\r\n    return (\r\n        <div>\r\n            <LoadingOutlined style={{ fontSize: props.fontSize }} spin />;\r\n        </div>\r\n    )\r\n}","import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\r\nimport { expensesDataAPI } from '../api/api';\r\nimport { Preloader } from './common/preloader';\r\nimport { connect } from 'react-redux';\r\nimport { getAllExpensesData } from '../redux/table-reduser';\r\nimport styles from './table.module.scss';\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditableTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: 'Expenses',\r\n        dataIndex: 'discription',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: 'Cost',\r\n        dataIndex: 'cost',\r\n        editable: true,\r\n        width: '12%',\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date',\r\n        editable: true,\r\n        width: '12%',\r\n      },\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (_, record) =>\r\n          this.props.dataSource.length >= 1 ? (\r\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n              <a>Delete</a>\r\n            </Popconfirm>\r\n          ) : null,\r\n          width: '15%',\r\n      },\r\n    ];\r\n    this.state = {\r\n      count: null,\r\n    };\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    expensesDataAPI.deleteExpense(this.props.currentYear, this.props.currentMonth, key)\r\n      .then((response) => {\r\n        if(response.resultCode === 'successfull') {\r\n          this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth);\r\n        }\r\n      }); \r\n  }\r\n  handleAdd = () => {    \r\n    this.props.setShowCreateExpenseForm(true);\r\n  };\r\n  \r\n  handleSave = (row) => {\r\n    const newMonthData = [...this.props.dataSource];\r\n    const index = newMonthData.findIndex((item) => row.key === item.key);\r\n    const item = newMonthData[index];\r\n    newMonthData.splice(index, 1, { ...item, ...row });\r\n    expensesDataAPI.editExpense(this.props.currentYear, this.props.currentMonth, newMonthData)\r\n      .then((response) => {\r\n        if(response.resultCode === 'successfull') {\r\n          this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth);\r\n        }\r\n      }); \r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth) //Получаем стартовый данные с сервака и диспатчим в стэйт\r\n  }\r\n\r\n  render() {\r\n    const dataSource = this.props.dataSource;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave,\r\n        }),\r\n      };\r\n    });\r\n    return (      \r\n      <div>\r\n        <Button\r\n          onClick={this.handleAdd}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n          disabled={this.state.startDataLoading}\r\n        >\r\n          Add a row\r\n        </Button>\r\n        {\r\n        this.props.dataSourceIsLoading \r\n        ? \r\n        <Preloader fontSize = {54} />\r\n        :\r\n        <Table className={styles.table}\r\n          components={components}\r\n          rowClassName={() => 'editable-row'}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n        />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dataSource: state.tableData.dataSource,\r\n    dataSourceIsLoading: state.tableData.dataSourceIsLoading,\r\n    currentYear: state.tableData.currentYear,\r\n    currentMonth: state.tableData.currentMonth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getAllExpensesData})(EditableTable);\r\n\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ExpenseData, State } from '../../redux/table-reduser';\r\nimport styles from './footer.module.scss';\r\n\r\nexport const Footer = () => {\r\n\r\n    const dataSource = useSelector((state: any) => state.tableData.dataSource);\r\n    const costArray = dataSource.map((el: ExpenseData) => el.cost)\r\n    const costSumm = costArray.reduce((start: number, end: number) => start + end, 0)\r\n\r\n    return (\r\n        <div className={styles.footer}>\r\n            <div> Total expenses: {costSumm} </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { Select } from 'semantic-ui-react'\r\nimport { getAllExpensesData, setCurrentDate } from '../../redux/table-reduser'\r\nimport { getCurrentMonth, getCurrentYear } from '../../utilits/calcCurrentDate'\r\nimport styles from './choosePeriod.module.scss'\r\n\r\nconst yearOptions = [\r\n  { key: '2020', value: '2020', text: '2020' },\r\n  { key: '2021', value: '2021', text: '2021' }\r\n]\r\n\r\nconst monthOptions = [\r\n    { key: 'January', value: 'January', text: 'January' },\r\n    { key: 'February', value: 'February', text: 'February' },\r\n    { key: 'March', value: 'March', text: 'March' },\r\n    { key: 'April', value: 'April', text: 'April' },\r\n    { key: 'May', value: 'May', text: 'May' },\r\n    { key: 'June', value: 'June', text: 'June' },\r\n    { key: 'July', value: 'July', text: 'July' },\r\n    { key: 'August', value: 'August', text: 'August' },\r\n    { key: 'September', value: 'September', text: 'September' },\r\n    { key: 'October', value: 'October', text: 'October' },\r\n    { key: 'November', value: 'November', text: 'November' },\r\n    { key: 'December', value: 'December', text: 'December' },\r\n  ]\r\n\r\nexport const ChoosePeriod = () => {\r\n\r\n    const [year, setYear] = useState(getCurrentYear);\r\n    const [month, setMonth] = useState(getCurrentMonth);\r\n\r\n    const onYearChange = (e: any, data: any) => {\r\n        setYear(data.value)\r\n    }\r\n    const onMonthChange = (e: any, data: any) => {\r\n        setMonth(data.value)\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setCurrentDate(year, month));\r\n        dispatch(getAllExpensesData(year, month))\r\n    }, [year, month])\r\n\r\n    return (\r\n        <div className={styles.choosePeriod}>\r\n            <Select placeholder='Select year' value={year} options={yearOptions}\r\n                className={styles.choosePeriodItem} onChange={onYearChange} />\r\n            <Select placeholder='Select month' value={month} options={monthOptions}\r\n                className={styles.choosePeriodItem} onChange={onMonthChange} />\r\n        </div>\r\n    )  \r\n}\r\n      \r\n\r\n","import { useState } from 'react';\r\nimport './App.css';\r\nimport { CrateExpenseForm } from './components/createExpForm/create-exp-form';\r\nimport EditableTable from './components/table';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Footer } from './components/footer/footer';\r\nimport { ChoosePeriod } from './components/choosePeriod/choosePeriod';\r\n\r\nfunction App() {\r\n\r\n  const [showCreateExpenseForm, setShowCreateExpenseForm] = useState(false); \r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={{paddingTop: '25px'}}>Expenses Table App</h1>\r\n      <ChoosePeriod />\r\n      <EditableTable setShowCreateExpenseForm={setShowCreateExpenseForm} /> \r\n      { <CrateExpenseForm setShowCreateExpenseForm={setShowCreateExpenseForm} showCreateExpenseForm={showCreateExpenseForm} /> }\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";  \r\nimport tableReduser from \"./table-reduser\";\r\n\r\nlet redusers = combineReducers({\r\n    tableData: tableReduser,\r\n    /* form: formReducer  */  //redux-form Lesson 75\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from './redux/store';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider >  \n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}