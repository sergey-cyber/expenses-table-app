{"version":3,"sources":["components/changeDataForm/change-data-form.module.scss","components/createExpForm/create-exp-form.module.scss","components/choosePeriod/choosePeriod.module.scss","components/header/header.module.scss","components/table.module.scss","components/footer/footer.module.scss","redux/table-reduser.ts","api/api.js","utilits/calcCurrentDate.ts","utilits/randomKeyGenerator.ts","components/createExpForm/create-exp-form.tsx","components/common/preloader.tsx","utilits/localization/localization_ru.ts","utilits/hooks/useLangLoocalization.ts","components/table.jsx","components/footer/footer.tsx","components/choosePeriod/choosePeriod.tsx","components/changeDataForm/change-data-form.tsx","redux/localization-reduser.ts","components/header/header.tsx","utilits/localization/localization_en.ts","App.js","utilits/localization/index.ts","reportWebVitals.js","redux/store.js","index.js"],"names":["module","exports","Actions","instance","axios","baseURL","headers","expensesDataAPI","year","month","get","then","response","data","newExpenseData","post","newMonthData","patch","itemKey","delete","getCurrentYear","String","Date","getFullYear","getCurrentMonth","getMonth","initialState","dataSource","currentYear","currentMonth","dataSourceIsLoading","currFieldNameChange","chancheFormIsOpen","dataRowBeginModified","yearsInBD","setDataIsLoading","isLoading","type","SET_DATA_IS_LOADING","setChangeDataFormOpen","SET_CHANGE_DATA_FORM_OPEN","getAllExpensesData","dispatch","expenses","resultCode","years","GET_ALL_EXPENSES","tableReduser","state","action","SET_CUURENT_DATE","generateHexString","length","ret","Math","random","toString","substring","console","log","CrateExpenseForm","props","initFormData","discription","cost","inThisMounth","date","useState","formData","setFormData","requiredError","setRequiredError","useSelector","tableData","useDispatch","handleChange","event","name","target","value","checked","Modal","open","showCreateExpenseForm","closeIcon","onClose","setShowCreateExpenseForm","onOpen","Header","content","Content","Form","onSubmit","submitValues","key","newData","postNewExpense","preventDefault","Field","required","placeholder","onChange","className","styles","error","autoComplete","checkbox","Button","primary","Preloader","LoadingOutlined","style","fontSize","spin","localization_ru","header","mainTitle","menu","language","russian","english","months","addRowButton","table","operations","footer","LocalizationContext","React","createContext","useLocalization","useContext","EditableContext","EditableRow","index","useForm","form","component","Provider","EditableCell","title","editable","children","dataIndex","record","handleSave","restProps","editing","setEditing","inputRef","useRef","useEffect","current","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","childNode","Item","margin","rules","message","ref","onPressEnter","onBlur","paddingRight","onClick","EditableTable","context","renderNonEditableCell","text","rowData","currFieldName","Object","keys","filter","handleDelete","handleAdd","row","findIndex","item","splice","componentDidMount","columns","width","render","expData","_","onConfirm","count","this","components","body","cell","map","col","onCell","marginBottom","disabled","rowClassName","bordered","pagination","Component","contextType","connect","Footer","currentLocalization","costSumm","el","reduce","start","end","ChoosePeriod","langMonthLocalization","monthOptions","obj","yearOptions","setYear","setMonth","choosePeriod","Select","options","choosePeriodItem","e","ChangeDataForm","formIsOpen","currYear","currMonth","isPlus","setIsPlus","costInputValue","setCostInputValue","updatedRow","Number","newDataSource","changeDataForm","initialValue","Checkbox","toggle","Input","costInput","submitBtn","Langs","currentLang","RU","setLangLocalization","SET_LANG_LOCALIZATION","localizationReduser","localizationData","langLocalization","menuLocalization","SubMenu","Menu","CheckOutlined","paddingLeft","EN","paddingTop","overlay","headerMenu","SettingOutlined","localization_en","App","lang","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7a47d3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"changeDataForm\":\"change-data-form_changeDataForm__1NgnL\",\"submitBtn\":\"change-data-form_submitBtn__2uiFs\",\"choosePeriod\":\"change-data-form_choosePeriod__39pKV\",\"choosePeriodItem\":\"change-data-form_choosePeriodItem__5qUmN\",\"initialValue\":\"change-data-form_initialValue__389XS\",\"costInput\":\"change-data-form_costInput__3yDu1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"create-exp-form_checkbox__2U6Nv\",\"error\":\"create-exp-form_error__W-yZF\",\"fieldError\":\"create-exp-form_fieldError__Q_t2q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"choosePeriod\":\"choosePeriod_choosePeriod__HVfpJ\",\"choosePeriodItem\":\"choosePeriod_choosePeriodItem__ceR1o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2o1aY\",\"headerMenu\":\"header_headerMenu__380yE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"table_table__3EzUw\",\"deleteBtn\":\"table_deleteBtn__pTHfJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"footer_footer__jVOIr\"};","import { expensesDataAPI } from \"../api/api\";\r\nimport { getCurrentMonth, getCurrentYear } from \"../utilits/calcCurrentDate\";\r\n\r\nenum Actions {\r\n    GET_ALL_EXPENSES = 'expenses-app/tableData/GET_ALL_EXPENSES',\r\n    SET_DATA_IS_LOADING = 'expenses-app/tableData/SET_DATA_IS_LOADING',\r\n    SET_CUURENT_DATE = 'expenses-app/tableData/SET_CUURENT_DATE',\r\n    SET_CHANGE_DATA_FORM_OPEN = 'expenses-app/tableData/SET_CHANGE_DATA_FORM_OPEN'\r\n}\r\n\r\ntype Action = {\r\n    type: Actions.GET_ALL_EXPENSES,\r\n    dataSource: Array<ExpenseData>,\r\n    yearsInBD: Array<string>\r\n} | {\r\n    type: Actions.SET_DATA_IS_LOADING,\r\n    isLoading: boolean\r\n} | {\r\n    type: Actions.SET_CUURENT_DATE,\r\n    currentYear: string,\r\n    currentMonth: string\r\n} | {\r\n    type: Actions.SET_CHANGE_DATA_FORM_OPEN, \r\n    currFieldNameChange: string | null, \r\n    chancheFormIsOpen: boolean,\r\n    dataRowBeginModified: object | null\r\n}\r\n\r\nexport type ExpenseData = {\r\n    key: string,\r\n    discription: string,\r\n    cost: number,\r\n    date: string\r\n}\r\n\r\nexport type State = {\r\n    dataSource: Array<ExpenseData> | [],\r\n    currentYear: string,\r\n    currentMonth: string,\r\n    dataSourceIsLoading: boolean,\r\n    currFieldNameChange: string | null\r\n    chancheFormIsOpen: boolean,\r\n    dataRowBeginModified: object | null,\r\n    yearsInBD: Array<string> | []\r\n}\r\n\r\nconst initialState: State = {\r\n    dataSource: [],\r\n    currentYear: getCurrentYear,\r\n    currentMonth: getCurrentMonth,\r\n    dataSourceIsLoading: false,\r\n    currFieldNameChange: null,\r\n    chancheFormIsOpen: false,\r\n    dataRowBeginModified: null,\r\n    yearsInBD: [] //Количество годов с данными, приходит с сервера\r\n};\r\n\r\nconst tableReduser = (state: State = initialState, action: Action): State => {\r\n    switch (action.type) {\r\n        case Actions.GET_ALL_EXPENSES:\r\n            return {\r\n                ...state,\r\n                dataSource: action.dataSource,\r\n                yearsInBD: action.yearsInBD\r\n            }\r\n        case Actions.SET_DATA_IS_LOADING:\r\n            return {\r\n                ...state,\r\n                dataSourceIsLoading: action.isLoading,\r\n        }\r\n        case Actions.SET_CUURENT_DATE:\r\n            return {\r\n                ...state,\r\n                currentYear: action.currentYear,\r\n                currentMonth: action.currentMonth\r\n        }\r\n        case Actions.SET_CHANGE_DATA_FORM_OPEN:\r\n            return {\r\n                ...state,\r\n                currFieldNameChange: action.currFieldNameChange,\r\n                chancheFormIsOpen: action.chancheFormIsOpen,\r\n                dataRowBeginModified: action.dataRowBeginModified\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n//Action Creators\r\n\r\nexport const getAllExpensesDataAction = (expenses:Array<ExpenseData>, yearsInBD: Array<string>): Action => {\r\n    return { type: Actions.GET_ALL_EXPENSES, dataSource: expenses, yearsInBD };\r\n}\r\n\r\nexport const setDataIsLoading = (isLoading: boolean): Action => {\r\n    return { type: Actions.SET_DATA_IS_LOADING, isLoading };\r\n}\r\n\r\nexport const setCurrentDate = (currentYear: string, currentMonth: string): Action => {\r\n    return { type: Actions.SET_CUURENT_DATE, currentYear, currentMonth };\r\n}\r\n\r\nexport const setChangeDataFormOpen = (currFieldNameChange: string | null, chancheFormIsOpen: boolean, dataRowBeginModified: object | null): Action => {\r\n    return { type: Actions.SET_CHANGE_DATA_FORM_OPEN, currFieldNameChange, chancheFormIsOpen, dataRowBeginModified };\r\n}\r\n\r\n//Thunks\r\n\r\nexport const getAllExpensesData = (currentYear: string, currentMonth: string) => {   \r\n    return (dispatch: any) => {\r\n        dispatch(setDataIsLoading(true));\r\n        return expensesDataAPI.getAllExpenses(currentYear, currentMonth).then((response: any) => {\r\n            if (response.resultCode === 'successfull') {\r\n                dispatch(getAllExpensesDataAction(response.expenses, response.years));\r\n            }\r\n            dispatch(setDataIsLoading(false));\r\n        });\r\n    }\r\n}\r\n\r\nexport const postNewExpense = (year: string, month: string, newData: ExpenseData) => {   \r\n    return (dispatch: any) => {\r\n        return expensesDataAPI.postNewExpense(year, month, newData).then((response: any) => {\r\n            if (response.resultCode === 'successfull') {\r\n                dispatch(getAllExpensesData(year, month));\r\n            }\r\n        });\r\n    }\r\n}\r\n/*\r\nexport const login = (email, password, rememberMe) => { //Lesson 78\r\n    return async (dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe);\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuth());\r\n        } else {\r\n            dispatch(stopSubmit('login', { _error: 'Error in password or email' })); //Lesson 79\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = () => {    //Lesson 78\r\n    return async (dispatch) => {\r\n        let response = await authAPI.logout();\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false));\r\n        }\r\n    }\r\n} */\r\n\r\nexport default tableReduser;","import * as axios from \"axios\";\r\n\r\nconst instance = axios.create({ \r\n    /* withCredentials: true, */\r\n    baseURL: /* 'http://localhost:5000/api/' */ 'https://my-expenses-table-app.herokuapp.com/api/',\r\n    headers: {\r\n        /* \"Access-Control-Allow-Origin\": \"*\" */\r\n    }    \r\n});\r\n\r\nexport const expensesDataAPI = {\r\n    getAllExpenses (year, month) {\r\n        return instance.get(`expensesData?year=${year}&month=${month}`) //Базовый урл сам добавляется\r\n            .then((response) => response.data)\r\n    },\r\n    postNewExpense(year, month, newExpenseData) {  //в объекте приходит: key, discription, cost, date\r\n        return instance.post('expensesData', { year, month, newExpenseData}) \r\n            .then((response) => response.data)\r\n    },\r\n    editExpense(year, month, newMonthData) {  //Приходит массив со всеми данными\r\n        return instance.patch('expensesData', {year, month, newMonthData}) \r\n            .then((response) => response.data)\r\n    },\r\n    deleteExpense(year, month, itemKey) {  //в объекте приходит: key, no, discription, cost, date\r\n        return instance.delete(`expensesData?year=${year}&month=${month}&itemKey=${itemKey}`) //Отправляем Key элемента который нужно удалить \r\n            .then((response) => response.data)\r\n    }\r\n}\r\n\r\n\r\n\r\n","export const getCurrentYear: string = String(new Date().getFullYear());\r\nconst monthIndex: number = new Date().getMonth();\r\nconst months: Array<string> = ['January','February','March','April','May','June','July','August','September','October','November','December']\r\nexport const getCurrentMonth: string = months[monthIndex];","export function generateHexString(length: number): string {\r\n    var ret: string = \"\";\r\n    while (ret.length < length) {\r\n      ret += Math.random().toString(16).substring(2);\r\n    }\r\n    return ret.substring(0,length);\r\n  }\r\n  \r\n  // 40-/64-bit WEP: 10 digit key\r\n  console.log(\"40-bit:\" + generateHexString(10));\r\n  \r\n  // 104-/128-bit WEP: 26 digit key\r\n  console.log(\"104-bit:\" + generateHexString(26))\r\n  \r\n  // 256-bit WEP: 58 digit key\r\n  console.log(\"256-bit:\" + generateHexString(58));","import React, { useState } from 'react';\r\nimport styles from './create-exp-form.module.scss';\r\nimport { Button, Header, Modal, Form } from 'semantic-ui-react'\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { postNewExpense, State } from '../../redux/table-reduser';\r\nimport { generateHexString } from '../../utilits/randomKeyGenerator';\r\n\r\ntype FormData = {\r\n    discription: string,\r\n    cost: number,\r\n    inThisMounth: boolean,\r\n    date: string\r\n}\r\n\r\ntype Props = {\r\n    setShowCreateExpenseForm: any,\r\n    showCreateExpenseForm: boolean\r\n}\r\n\r\ntype SubmitValues = {\r\n    key: string,\r\n    discription: string,\r\n    cost: number,\r\n    date: string,\r\n}\r\n\r\nexport function CrateExpenseForm (props: Props) {\r\n\r\n    const initFormData: FormData = {\r\n        discription: '',\r\n        cost: 0,\r\n        inThisMounth: true,\r\n        date: ''\r\n    }\r\n\r\n    const [formData, setFormData ] = useState(initFormData);\r\n    const [requiredError, setRequiredError] = useState({discription: false, cost: false});\r\n    const year: string = useSelector((state: any) => state.tableData.currentYear);\r\n    const month: string = useSelector((state: any) => state.tableData.currentMonth);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleSubmit = (event: any) => {\r\n        const submitValues: SubmitValues = {\r\n            key: generateHexString(26),\r\n            discription: formData.discription,\r\n            cost: formData.cost,\r\n            date: formData.date ? formData.date : month\r\n        }\r\n        dispatch(postNewExpense(year, month, submitValues));\r\n        props.setShowCreateExpenseForm(false);\r\n        setFormData(initFormData);\r\n        event.preventDefault();\r\n    }\r\n\r\n    const handleChange = (event: any) => {\r\n        const name = event.target.name;\r\n        const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;\r\n        setFormData({...formData, [name]: value});\r\n        if(!value) {\r\n            setRequiredError({...requiredError, [name]: true})\r\n        } else {\r\n            setRequiredError({...requiredError, [name]: false})\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal open={props.showCreateExpenseForm} closeIcon\r\n                 onClose={() => props.setShowCreateExpenseForm(false)} \r\n                 onOpen={() => props.setShowCreateExpenseForm(true)} >\r\n            <Header content='Create new Expense' />\r\n            <Modal.Content>\r\n            <Form onSubmit={handleSubmit} >\r\n                <Form.Field required>\r\n                    <label>Discription:</label>\r\n                    <textarea required placeholder='Expense name' name='discription' value={formData.discription} onChange={handleChange} />\r\n                    {requiredError.discription && <div className={styles.error}>Require field</div>}\r\n                </Form.Field>\r\n                <Form.Field required>\r\n                    <label>Cost:</label>\r\n                    <input type='number' placeholder='Expense cost' name='cost' \r\n                        autoComplete={\"off\"} value={formData.cost} onChange={handleChange} required />\r\n                    {requiredError.cost && <div className={styles.error}>Require field</div>}\r\n                </Form.Field>\r\n                {\r\n                !formData.inThisMounth && \r\n                <Form.Field>\r\n                    <label>Date:</label>\r\n                    <input placeholder='Expense date' name='date' value={formData.date} onChange={handleChange} autoComplete={\"off\"} />\r\n                </Form.Field>\r\n                }               \r\n                <Form.Field>\r\n                <label className={styles.checkbox}>In this mounth:\r\n                    <input type=\"checkbox\" name='inThisMounth' checked={formData.inThisMounth} onChange={handleChange} />\r\n                </label>\r\n                </Form.Field>\r\n                <Button primary type='submit'>Create</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n    )\r\n}","import React from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\n\r\ntype Props = {\r\n    fontSize: number\r\n}\r\n\r\nexport function Preloader(props: Props) {\r\n    return (\r\n        <div>\r\n            <LoadingOutlined style={{ fontSize: props.fontSize }} spin />;\r\n        </div>\r\n    )\r\n}","export const localization_ru = {\r\n    header: {\r\n        mainTitle: \"Таблица расходов\",\r\n        menu: {\r\n            language: \"Язык\",\r\n            russian: \"Русский\",\r\n            english: \"Английски\"\r\n        }\r\n    },\r\n    months: [ \"Январь\", \"Февраль\", \"Март\", \"Апрель\", \"Май\", \"Июнь\", \"Июль\", \"Август\", \"Сентябрь\", \"Октябрь\", \"Ноябрь\", \"Декабрь\" ],\r\n    addRowButton: \"Добавить строку\",\r\n    table: {\r\n        expenses: \"Затраты\",\r\n        cost: \"Стоимость\",\r\n        date: \"Дата\",\r\n        operations: \"Операции\"\r\n    },\r\n    footer: \"Всего затрат:\"\r\n}","import React, { useContext } from 'react';\r\nimport { localization_ru } from '../localization/localization_ru';\r\n\r\nexport const LocalizationContext = React.createContext(localization_ru);\r\n\r\nexport const useLocalization = () => {\r\n    const langLocalization = useContext(LocalizationContext);\r\n    return langLocalization;\r\n}","import React, { useContext, useState, useEffect, useRef } from 'react';\r\nimport { Table, Input, Button, Popconfirm, Form } from 'antd';\r\nimport { expensesDataAPI } from '../api/api';\r\nimport { Preloader } from './common/preloader';\r\nimport { connect } from 'react-redux';\r\nimport { getAllExpensesData, setChangeDataFormOpen } from '../redux/table-reduser';\r\nimport styles from './table.module.scss';\r\nimport { LocalizationContext } from '../utilits/hooks/useLangLoocalization';\r\n\r\nconst EditableContext = React.createContext(null);\r\n\r\nconst EditableRow = ({ index, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst EditableCell = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  ...restProps\r\n}) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const form = useContext(EditableContext);\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const toggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({\r\n      [dataIndex]: record[dataIndex],\r\n    });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      toggleEdit();\r\n      handleSave({ ...record, ...values });\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{\r\n          margin: 0,\r\n        }}\r\n        name={dataIndex}\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className=\"editable-cell-value-wrap\"\r\n        style={{\r\n          paddingRight: 24,\r\n        }}\r\n        onClick={toggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nclass EditableTable extends React.Component {\r\n  static contextType = LocalizationContext;\r\n  constructor(props, context) {\r\n    super(props);\r\n    this.columns = [\r\n      {\r\n        title: 'Expenses',\r\n        dataIndex: 'discription',\r\n        editable: true,\r\n      },\r\n      {\r\n        title: 'Cost',\r\n        dataIndex: 'cost',\r\n        width: '12%',\r\n        render: (text, expData) => {\r\n          return this.renderNonEditableCell(text, expData)  \r\n        },\r\n      },\r\n      {\r\n        title: 'Date',\r\n        dataIndex: 'date',\r\n        width: '12%',\r\n        editable: false\r\n      },\r\n      {\r\n        title: 'operation',\r\n        dataIndex: 'operation',\r\n        render: (_, record) =>\r\n          this.props.dataSource.length >= 1 ? (\r\n            <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record.key)}>\r\n              <a>Delete</a>\r\n            </Popconfirm>\r\n          ) : null,\r\n          width: '15%',\r\n      },\r\n    ];\r\n    this.state = {\r\n      count: null\r\n    };\r\n  }\r\n\r\n  renderNonEditableCell = (text, rowData) => {\r\n    const fieldNames = Object.keys(rowData);\r\n    const currFieldName = fieldNames.filter(name => rowData[name] === text)[0]\r\n    return (\r\n      <div onClick = {() => this.props.setChangeDataFormOpen(currFieldName, true, rowData)}>\r\n        {rowData[currFieldName]}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleDelete = (key) => {\r\n    expensesDataAPI.deleteExpense(this.props.currentYear, this.props.currentMonth, key)\r\n      .then((response) => {\r\n        if(response.resultCode === 'successfull') {\r\n          this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth);\r\n        }\r\n      }); \r\n  }\r\n  handleAdd = () => {    \r\n    this.props.setShowCreateExpenseForm(true);\r\n  };\r\n  \r\n  handleSave = (row) => {\r\n    const newMonthData = [...this.props.dataSource];\r\n    const index = newMonthData.findIndex((item) => row.key === item.key);\r\n    const item = newMonthData[index];\r\n    newMonthData.splice(index, 1, { ...item, ...row });\r\n    expensesDataAPI.editExpense(this.props.currentYear, this.props.currentMonth, newMonthData)\r\n      .then((response) => {\r\n        if(response.resultCode === 'successfull') {\r\n          this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth);\r\n        }\r\n      }); \r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.props.getAllExpensesData(this.props.currentYear, this.props.currentMonth) //Получаем стартовый данные с сервака и диспатчим в стэйт\r\n  }\r\n\r\n  render() {\r\n    const dataSource = this.props.dataSource;\r\n    const components = {\r\n      body: {\r\n        row: EditableRow,\r\n        cell: EditableCell,\r\n      },\r\n    };\r\n    const columns = this.columns.map((col) => {\r\n      if (!col.editable) {\r\n        return col;\r\n      }\r\n\r\n      return {\r\n        ...col,\r\n        onCell: (record) => ({\r\n          record,\r\n          editable: col.editable,\r\n          dataIndex: col.dataIndex,\r\n          title: col.title,\r\n          handleSave: this.handleSave\r\n        }),\r\n      };\r\n    });\r\n    return (      \r\n      <div>\r\n        <Button\r\n          onClick={this.handleAdd}\r\n          type=\"primary\"\r\n          style={{ marginBottom: 16 }}\r\n          disabled={this.props.dataSourceIsLoading}\r\n        >\r\n          { this.context.addRowButton }\r\n        </Button>\r\n        {\r\n        this.props.dataSourceIsLoading \r\n        ? \r\n        <Preloader fontSize = {54} />\r\n        :\r\n        <Table className={styles.table}\r\n          components={components}\r\n          rowClassName={() => 'editable-row'}\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n        />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dataSource: state.tableData.dataSource,\r\n    dataSourceIsLoading: state.tableData.dataSourceIsLoading,\r\n    currentYear: state.tableData.currentYear,\r\n    currentMonth: state.tableData.currentMonth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {getAllExpensesData, setChangeDataFormOpen })(EditableTable);\r\n\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ExpenseData, State } from '../../redux/table-reduser';\r\nimport { useLocalization } from '../../utilits/hooks/useLangLoocalization';\r\nimport styles from './footer.module.scss';\r\n\r\nexport const Footer = () => {\r\n\r\n    const currentLocalization = useLocalization();\r\n    const dataSource = useSelector((state: any) => state.tableData.dataSource);\r\n    const costArray = dataSource.map((el: ExpenseData) => el.cost)\r\n    const costSumm = costArray.reduce((start: number, end: number) => start + end, 0)\r\n\r\n    return (\r\n        <div className={styles.footer}>\r\n            <div> { currentLocalization.footer } {costSumm} </div>\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Select } from 'semantic-ui-react'\r\nimport { getAllExpensesData, setCurrentDate } from '../../redux/table-reduser'\r\nimport { getCurrentMonth, getCurrentYear } from '../../utilits/calcCurrentDate'\r\nimport { useLocalization } from '../../utilits/hooks/useLangLoocalization'\r\nimport styles from './choosePeriod.module.scss'\r\n\r\nexport const months = [\r\n    { key: 'January', value: 'January', text: 'January' },\r\n    { key: 'February', value: 'February', text: 'February' },\r\n    { key: 'March', value: 'March', text: 'March' },\r\n    { key: 'April', value: 'April', text: 'April' },\r\n    { key: 'May', value: 'May', text: 'May' },\r\n    { key: 'June', value: 'June', text: 'June' },\r\n    { key: 'July', value: 'July', text: 'July' },\r\n    { key: 'August', value: 'August', text: 'August' },\r\n    { key: 'September', value: 'September', text: 'September' },\r\n    { key: 'October', value: 'October', text: 'October' },\r\n    { key: 'November', value: 'November', text: 'November' },\r\n    { key: 'December', value: 'December', text: 'December' },\r\n  ];\r\n\r\nexport const ChoosePeriod = () => {\r\n\r\n    const langMonthLocalization = useLocalization().months;\r\n    const monthOptions = months.map((obj, index) => ({ ...obj, text: langMonthLocalization[index] }));\r\n    const yearsInBD = useSelector((state: any) => state.tableData.yearsInBD);\r\n    const yearOptions = yearsInBD.map((year: string) => ({key: year, value: year, text: year}));\r\n    const dataSourceIsLoading = useSelector((state: any) => state.tableData.dataSourceIsLoading);    \r\n    const [year, setYear] = useState(getCurrentYear);\r\n    const [month, setMonth] = useState(getCurrentMonth);\r\n\r\n    const onYearChange = (e: any, data: any) => {\r\n        setYear(data.value)\r\n    }\r\n    const onMonthChange = (e: any, data: any) => {\r\n        setMonth(data.value)\r\n    }\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setCurrentDate(year, month));\r\n        dispatch(getAllExpensesData(year, month))\r\n    }, [year, month])\r\n    return ( \r\n        <div className={styles.choosePeriod}>\r\n            <Select placeholder='Select year' value={year} options={yearOptions}\r\n                className={styles.choosePeriodItem} onChange={onYearChange} disabled={dataSourceIsLoading} />\r\n            <Select placeholder='Select month' value={month} options={monthOptions}\r\n                className={styles.choosePeriodItem} onChange={onMonthChange} disabled={dataSourceIsLoading} />\r\n        </div>\r\n    )  \r\n}\r\n      \r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport styles from './change-data-form.module.scss';\r\nimport { Button, Header, Modal, Form, Select, Checkbox, Input } from 'semantic-ui-react'\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport { ExpenseData, setChangeDataFormOpen } from '../../redux/table-reduser';\r\nimport { getAllExpensesData } from '../../redux/table-reduser'\r\nimport { expensesDataAPI } from '../../api/api';\r\n\r\nexport function ChangeDataForm () {\r\n\r\n    const formIsOpen = useSelector((state: any) => state.tableData.chancheFormIsOpen);\r\n    const dataRowBeginModified = useSelector((state: any) => state.tableData.dataRowBeginModified);\r\n    const currYear = useSelector((state: any) => state.tableData.currentYear);\r\n    const currMonth = useSelector((state: any) => state.tableData.currentMonth);\r\n    const dataSource = useSelector((state: any) => state.tableData.dataSource);\r\n    const [isPlus, setIsPlus] = useState(true);\r\n    const [costInputValue, setCostInputValue] = useState(\"\");\r\n    const dispatch = useDispatch();\r\n\r\n    const onCchangeCostValue = (e: any, data: any) => {\r\n        setCostInputValue(data.value)\r\n    }\r\n    \r\n    const handleSubmit = (event: any) => {\r\n      \r\n        const updatedRow = {\r\n            ...dataRowBeginModified,\r\n            cost: isPlus ? Number(dataRowBeginModified.cost) + Number(costInputValue) : +costInputValue,\r\n        }\r\n        const newDataSource: Array<ExpenseData> = [...dataSource].map((row) => {\r\n            if(row.key === updatedRow.key) {\r\n                return updatedRow;\r\n            }\r\n            return row;\r\n        })\r\n\r\n        dispatch(setChangeDataFormOpen(null,false, null));\r\n        expensesDataAPI.editExpense(currYear, currMonth, newDataSource)\r\n            .then((response: any) => {\r\n                if(response.resultCode === 'successfull') {\r\n                    dispatch(getAllExpensesData(currYear, currMonth));\r\n                }\r\n            });\r\n        event.preventDefault();\r\n    }\r\n    \r\n    return (\r\n        <Modal open={formIsOpen} closeIcon\r\n            onClose={() => {\r\n                dispatch(setChangeDataFormOpen(null,false, null));\r\n                setCostInputValue(\"\");\r\n                setIsPlus(true);\r\n            }}>\r\n            <Header content={\"Отредактируйте стоимость\"} />\r\n            <Modal.Content>\r\n            <Form onSubmit={handleSubmit} className={styles.changeDataForm} >\r\n                <div className={styles.initialValue}>{ dataRowBeginModified?.cost }</div>\r\n                <div>{ isPlus ? \"Прибавить\" : \"Ввести новое значение\" }</div>\r\n                <Checkbox toggle checked={isPlus} onChange={() => setIsPlus(!isPlus)} />\r\n                <div>\r\n                    <Input required name=\"cost\" value={costInputValue} placeholder={\"Введите сумму\"}\r\n                        autoComplete={\"off\"} onChange={onCchangeCostValue} type={\"number\"} className={styles.costInput} />\r\n                </div>\r\n                <Button primary type='submit' className={styles.submitBtn}>Save</Button>\r\n            </Form>\r\n        </Modal.Content>\r\n    </Modal>\r\n    )\r\n}","export enum Langs {\r\n    RU = \"RU\",\r\n    EN = \"EN\",\r\n    header = \"header\"\r\n}\r\n\r\nenum Actions {\r\n    SET_LANG_LOCALIZATION = \"expenses-app/loalizationData/SET_LANG_LOCALIZATION\",\r\n}\r\n\r\ntype Action = {\r\n    type: Actions.SET_LANG_LOCALIZATION,\r\n    currentLang: Langs.RU | Langs.EN\r\n}\r\n\r\nexport type State = {\r\n    currentLang: Langs.RU | Langs.EN\r\n}\r\n\r\nconst initialState: State = {\r\n    currentLang: Langs.RU\r\n};\r\n\r\nconst localizationReduser = (state: State = initialState, action: Action): State => {\r\n    switch(action.type) {\r\n        case Actions.SET_LANG_LOCALIZATION: {\r\n            return {\r\n                ...state,\r\n                currentLang: action.currentLang\r\n            }\r\n        }\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setLangLocalization = (currentLang: Langs.RU | Langs.EN): Action => {\r\n    return { type: Actions.SET_LANG_LOCALIZATION, currentLang }\r\n};\r\n\r\nexport default localizationReduser;","import { Menu, Dropdown } from 'antd';\r\nimport { SettingOutlined, CheckOutlined } from '@ant-design/icons';\r\nimport styles from \"./header.module.scss\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Langs, setLangLocalization } from '../../redux/localization-reduser';\r\nimport { useLocalization } from '../../utilits/hooks/useLangLoocalization';\r\n\r\n\r\nexport function Header() {\r\n\r\n    const currentLang = useSelector((state: any) => state.localizationData.currentLang);\r\n    const langLocalization = useLocalization();\r\n    const menuLocalization = useLocalization().header.menu;\r\n    const dispatch = useDispatch();\r\n\r\n    const { SubMenu } = Menu;\r\n\r\n    const menu = (\r\n        <Menu>\r\n            <SubMenu title={ menuLocalization.language } key=\"Language\">\r\n                <Menu.Item onClick={ () => dispatch(setLangLocalization(Langs.RU)) } key={Langs.RU} >\r\n                    { menuLocalization.russian }\r\n                    { currentLang === Langs.RU && <CheckOutlined style={{paddingLeft: \"5px\"}} /> }\r\n                </Menu.Item>\r\n                <Menu.Item onClick={ () => dispatch(setLangLocalization(Langs.EN)) } key={Langs.EN} >\r\n                    { menuLocalization.english }\r\n                    { currentLang === Langs.EN && <CheckOutlined style={{paddingLeft: \"5px\"}} /> }\r\n                </Menu.Item>\r\n            </SubMenu>\r\n        </Menu>\r\n    )\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <h1 style={{paddingTop: '25px'}}> {langLocalization.header.mainTitle} </h1>\r\n            <Dropdown overlay={menu} className={styles.headerMenu}>\r\n                <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>\r\n                    <SettingOutlined style={{fontSize: \"2em\"}} />\r\n                </a>\r\n            </Dropdown>\r\n        </header>\r\n    )\r\n}","import { localization_ru } from \"./localization_ru\";\r\n\r\nexport const localization_en: typeof localization_ru = {\r\n    header: {\r\n        mainTitle: \"Expenses Table\",\r\n        menu: {\r\n            language: \"Language\",\r\n            russian: \"Russia\",\r\n            english: \"English\"\r\n        }\r\n    },\r\n    months: [ \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\" ],\r\n    addRowButton: \"Add a row\",\r\n    table: {\r\n        expenses: \"Expenses\",\r\n        cost: \"Cost\",\r\n        date: \"Date\",\r\n        operations: \"Operations\"\r\n    },\r\n    footer: \"Total expenses:\"\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { CrateExpenseForm } from './components/createExpForm/create-exp-form';\r\nimport EditableTable from './components/table';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Footer } from './components/footer/footer';\r\nimport { ChoosePeriod } from './components/choosePeriod/choosePeriod';\r\nimport { ChangeDataForm } from './components/changeDataForm/change-data-form';\r\nimport { Header } from './components/header/header';\r\nimport { getLangLocalization } from './utilits/localization/index';\r\nimport { useSelector } from 'react-redux';\r\nimport { LocalizationContext } from \"./utilits/hooks/useLangLoocalization\";\r\n\r\nfunction App() {\r\n\r\n  const currentLang = useSelector((state) => state.localizationData.currentLang); \r\n  const [showCreateExpenseForm, setShowCreateExpenseForm] = useState(false); \r\n\r\n  return (\r\n    <LocalizationContext.Provider value={ getLangLocalization(currentLang) }>\r\n      <div className=\"App\">\r\n        <Header />\r\n        <ChoosePeriod />\r\n        <EditableTable setShowCreateExpenseForm={setShowCreateExpenseForm} /> \r\n        <CrateExpenseForm setShowCreateExpenseForm={setShowCreateExpenseForm} showCreateExpenseForm={showCreateExpenseForm} />\r\n        <ChangeDataForm />\r\n        <Footer />\r\n      </div>\r\n    </LocalizationContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { Langs } from \"../../redux/localization-reduser\";\r\nimport { localization_en } from \"./localization_en\";\r\nimport { localization_ru } from \"./localization_ru\";\r\n\r\nexport const getLangLocalization = (lang: Langs.RU | Langs.EN) => {\r\n    return lang === Langs.RU ? localization_ru : localization_en;\r\n} ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";  \r\nimport tableReduser from \"./table-reduser\";\r\nimport localizationReduser from \"./localization-reduser\";\r\n\r\nlet redusers = combineReducers({\r\n    tableData: tableReduser,\r\n    localizationData: localizationReduser\r\n    /* form: formReducer  */  //redux-form Lesson 75\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from \"react-router-dom\";\nimport store from './redux/store';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider >  \n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}